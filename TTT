import java.util.ArrayList;
import java.util.Collections;
//convert this to C++ later
public class TTT<Key extends Comparable<Key>, Value> {
    private class Node {
        private Key key;           // key
        private Value val;         // associated data
        private Node left, right;  // links to left and right subtrees
        private boolean color;     // color of parent link
        private int size;          // subtree count

        public Node(Key key, Value val, boolean color, int size) {
            this.key = key;
            this.val = val;
            this.color = color;
            this.size = size;
        }

        public String toString() {
            if (root == null) return "";
            else return " " + toString(this);
        }

        public String toString(TTT.Node x) {
            String s = "{key:";
            s += x.key;
            s += " ";
            s += (x.color ? "RED" : "BLACK");
            s += " ";
            s += "left:" + (x.left != null ? (x.left.key + (x.left.color ? "RED" : "BLACK")) : null);
            s += " ";
            s += "right:" + (x.right != null ? (x.right.key + (x.right.color ? "RED" : "BLACK")) : null);
            s += "}";
            return s;
        }
    }

    Node root;
    private static final boolean RED = true;
    private static final boolean BLACK = false;

    public TTT() {
        root = null;
    }

    public void insert(Key k, Value v) {
        root = insert(root, k, v);
        root.color = BLACK;
    }

    private Node insert(Node node, Key k, Value v) {
        if (node == null) {
            return new Node(k, v, RED, 1);
        }
        int cmp = k.compareTo(node.key);
        if (cmp == 0) {
            node.val = v;
        } else if (cmp > 0) {
            node.right = insert(node.right, k, v);
        } else {
            node.left = insert(node.left, k, v);
        }
        return fixUp(node);
    }

    private boolean isRed(Node node) {
        return node != null && node.color == RED;
    }

    private Node fixUp(Node node) {
        assert node != null;
        if (!isRed(node.left) && isRed(node.right)) {
            node = rotateLeft(node);
        }
        if (isRed(node.left) && isRed(node.left.left)) {
            node = rotateRight(node);
        }
        if (isRed(node.left) && isRed(node.right)) {
            node = flip(node);
        }
        node.size = size(node.left) + size(node.right) + 1;
        return node;
    }

    private Node flip(Node node) {
        assert (node != null) && (node.left != null) && (node.right != null);
        assert (!isRed(node) && isRed(node.left) && isRed(node.right))
                || (isRed(node) && !isRed(node.left) && !isRed(node.right));
        node.color = !node.color;
        node.left.color = !node.left.color;
        node.right.color = !node.right.color;
        return node;
    }

    private Node rotateLeft(Node node) {
        assert node != null && isRed(node.right);
        Node tmp = node.right;
        node.right = tmp.left;
        tmp.left = node;
        tmp.color = node.color;
        node.color = RED;
        node.size = size(node.left) + size(node.right) + 1;
        return tmp;
    }

    private Node rotateRight(Node node) {
        assert node != null && isRed(node.left);
        Node tmp = node.left;
        node.left = tmp.right;
        tmp.right = node;
        tmp.color = node.color;
        node.color = RED;
        node.size = size(node.left) + size(node.right) + 1;
        return tmp;
    }

    public Value get(Key k) {
        Node n = root;
        while (n != null) {
            int tmp = k.compareTo(n.key);
            if (tmp == 0) {
                return n.val;
            } else if (tmp < 0) {
                n = n.left;
            } else {
                n = n.right;
            }
        }
        return null;
    }

    public boolean contains(Key k) {
        return get(k) != null;
    }

    public Node delete(Key k) {
        if (!contains(k)) {
            return root;
        }
        root = delete(root, k);
        if (root != null) {
            root.color = BLACK;
        }
        return root;
    }

    public Node delete(Node node, Key k) {
        assert node != null;
        int tmp = k.compareTo(node.key);
        if (tmp < 0) {
            if (!isRed(node.left) && !isRed(node.left.left)) {
                node = moveRedLeft(node);
            }
            node.left = delete(node.left, k);
        } else {
            if (isRed(node.left)) {
                node = rotateRight(node);
            }
            if (k.compareTo(node.key) == 0 && node.right == null) {
                return null;
            }
            if (!isRed(node.right) && !isRed(node.right.left)) {
                node = moveRedRight(node);
            }
            if (k.compareTo(node.key) == 0) {
                node.key = getMin(node.right).key;
                node.val = getMin(node.right).val;
                node.right = deleteMin(node.right);
            } else {
                node.right = delete(node.right, k);
            }
        }
        return fixUp(node);
    }

    private Node moveRedLeft(Node node) {
        assert (node != null);
        assert isRed(node) && !isRed(node.left) && !isRed(node.left.left);
        node = flip(node);
        if (isRed(node.right.left)) {
            node.right = rotateRight(node.right);
            node = rotateLeft(node);
            node = flip(node);
        }
        return node;
    }

    private Node moveRedRight(Node node) {
        assert (node != null);
        assert isRed(node) && !isRed(node.right) && !isRed(node.right.left);
        node = flip(node);
        if (isRed(node.left.left)) {
            node = rotateRight(node);
            node = flip(node);
        }
        return node;
    }

    private Node getMin(Node node) {
        if (node == null) {
            return node;
        }
        Node left = node.left;
        while (left != null) {
            node = left;
            left = left.left;
        }
        return node;
    }

    private Node deleteMin(Node node) {
        assert node != null;
        if (node.left == null) {
            return null;
        }
        if (!isRed(node.left) && !isRed(node.left.left)) {
            node = moveRedLeft(node);
        }
        node.left = deleteMin(node.left);
        return fixUp(node);
    }

    //code below is copied from original source file

    /**
     * Returns the number of key-value pairs in this symbol table.
     *
     * @return the number of key-value pairs in this symbol table
     */
    public int size() {
        return size(root);
    }

    private int size(Node x) {
        if (x == null) return 0;
        return x.size;
    }

    public boolean check() {
        if (!isBST()) StdOut.println("Not in symmetric order");
        if (!isSizeConsistent()) StdOut.println("Subtree counts not consistent");
        if (!isRankConsistent()) StdOut.println("Ranks not consistent");
        if (!is23()) StdOut.println("Not a 2-3 tree");
        if (!isBalanced()) StdOut.println("Not balanced");
        return isBST() && isSizeConsistent() && isRankConsistent() && is23() && isBalanced();
    }

    // does this binary tree satisfy symmetric order?
    // Note: this test also ensures that data structure is a binary tree since order is strict
    private boolean isBST() {
        return isBST(root, null, null);
    }

    // is the tree rooted at x a BST with all keys strictly between min and max
    // (if min or max is null, treat as empty constraint)
    // Credit: Bob Dondero's elegant solution
    private boolean isBST(Node x, Key min, Key max) {
        if (x == null) return true;
        if (min != null && x.key.compareTo(min) <= 0) return false;
        if (max != null && x.key.compareTo(max) >= 0) return false;
        return isBST(x.left, min, x.key) && isBST(x.right, x.key, max);
    }

    // are the size fields correct?
    private boolean isSizeConsistent() {
        return isSizeConsistent(root);
    }

    private boolean isSizeConsistent(Node x) {
        if (x == null) return true;
        if (x.size != size(x.left) + size(x.right) + 1) return false;
        return isSizeConsistent(x.left) && isSizeConsistent(x.right);
    }

    /**
     * Return the number of keys in the symbol table strictly less than {@code key}.
     *
     * @param key the key
     * @return the number of keys in the symbol table strictly less than {@code key}
     * @throws IllegalArgumentException if {@code key} is {@code null}
     */
    public int rank(Key key) {
        if (key == null) throw new IllegalArgumentException("argument to rank() is null");
        return rank(key, root);
    }

    // number of keys less than key in the subtree rooted at x
    private int rank(Key key, Node x) {
        if (x == null) return 0;
        int cmp = key.compareTo(x.key);
        if (cmp < 0) return rank(key, x.left);
        else if (cmp > 0) return 1 + size(x.left) + rank(key, x.right);
        else return size(x.left);
    }

    /**
     * Return the kth smallest key in the symbol table.
     *
     * @param k the order statistic
     * @return the {@code k}th smallest key in the symbol table
     * @throws IllegalArgumentException unless {@code k} is between 0 and
     *                                  <em>n</em>â€“1
     */
    public Key select(int k) {
        if (k < 0 || k >= size()) {
            throw new IllegalArgumentException("argument to select() is invalid: " + k);
        }
        Node x = select(root, k);
        return x.key;
    }

    // the key of rank k in the subtree rooted at x
    private Node select(Node x, int k) {
        // assert x != null;
        // assert k >= 0 && k < size(x);
        int t = size(x.left);
        if (t > k) return select(x.left, k);
        else if (t < k) return select(x.right, k - t - 1);
        else return x;
    }

    // check that ranks are consistent
    private boolean isRankConsistent() {
        for (int i = 0; i < size(); i++)
            if (i != rank(select(i))) return false;
        for (Key key : keys())
            if (key.compareTo(select(rank(key))) != 0) return false;
        return true;
    }

    /**
     * Returns all keys in the symbol table as an {@code Iterable}.
     * To iterate over all of the keys in the symbol table named {@code st},
     * use the foreach notation: {@code for (Key key : st.keys())}.
     *
     * @return all keys in the symbol table as an {@code Iterable}
     */
    public Iterable<Key> keys() {
        if (isEmpty()) return new Queue<Key>();
        return keys(min(), max());
    }

    /**
     * Returns the largest key in the symbol table.
     *
     * @return the largest key in the symbol table
     * @throws NoSuchElementException if the symbol table is empty
     */
    public Key max() {
        if (isEmpty()) throw new RuntimeException("calls max() with empty symbol table");
        return max(root).key;
    }

    /**
     * Is this symbol table empty?
     *
     * @return {@code true} if this symbol table is empty and {@code false} otherwise
     */
    public boolean isEmpty() {
        return root == null;
    }

    // the largest key in the subtree rooted at x; null if no such key
    private Node max(Node x) {
        // assert x != null;
        if (x.right == null) return x;
        else return max(x.right);
    }

    /**
     * Returns the smallest key in the symbol table.
     *
     * @return the smallest key in the symbol table
     * @throws NoSuchElementException if the symbol table is empty
     */
    public Key min() {
        if (isEmpty()) throw new RuntimeException("calls min() with empty symbol table");
        return min(root).key;
    }

    // the smallest key in subtree rooted at x; null if no such key
    private Node min(Node x) {
        // assert x != null;
        if (x.left == null) return x;
        else return min(x.left);
    }

    /**
     * Returns all keys in the symbol table in the given range,
     * as an {@code Iterable}.
     *
     * @param lo minimum endpoint
     * @param hi maximum endpoint
     * @return all keys in the sybol table between {@code lo}
     * (inclusive) and {@code hi} (inclusive) as an {@code Iterable}
     * @throws IllegalArgumentException if either {@code lo} or {@code hi}
     *                                  is {@code null}
     */
    public Iterable<Key> keys(Key lo, Key hi) {
        if (lo == null) throw new IllegalArgumentException("first argument to keys() is null");
        if (hi == null) throw new IllegalArgumentException("second argument to keys() is null");

        Queue<Key> queue = new Queue<Key>();
        // if (isEmpty() || lo.compareTo(hi) > 0) return queue;
        keys(root, queue, lo, hi);
        return queue;
    }

    // add the keys between lo and hi in the subtree rooted at x
    // to the queue
    private void keys(Node x, Queue<Key> queue, Key lo, Key hi) {
        if (x == null) return;
        int cmplo = lo.compareTo(x.key);
        int cmphi = hi.compareTo(x.key);
        if (cmplo < 0) keys(x.left, queue, lo, hi);
        if (cmplo <= 0 && cmphi >= 0) queue.enqueue(x.key);
        if (cmphi > 0) keys(x.right, queue, lo, hi);
    }

    // Does the tree have no red right links, and at most one (left)
    // red links in a row on any path?
    private boolean is23() {
        return is23(root);
    }

    private boolean is23(Node x) {
        if (x == null) return true;
        if (isRed(x.right)) return false;
        if (x != root && isRed(x) && isRed(x.left))
            return false;
        return is23(x.left) && is23(x.right);
    }

    // do all paths from root to leaf have same number of black edges?
    private boolean isBalanced() {
        int black = 0;     // number of black links on path from root to min
        Node x = root;
        while (x != null) {
            if (!isRed(x)) black++;
            x = x.left;
        }
        return isBalanced(root, black);
    }

    // does every path from the root to a leaf have the given number of black links?
    private boolean isBalanced(Node x, int black) {
        if (x == null) return black == 0;
        if (!isRed(x)) black--;
        return isBalanced(x.left, black) && isBalanced(x.right, black);
    }


    /**
     * Unit tests the {@code RedBlackBST} data type.
     *
     * @param args the command-line arguments
     */
    public static void main(String[] args) {
        ArrayList<Integer> list1 = new ArrayList<>();
        for (int i = 0; i < 1000; i++) {
            list1.add(i);
        }
        Collections.shuffle(list1);
        TTT<String, Integer> st = new TTT<String, Integer>();
        for (int i = 0; i < list1.size(); i++) {
            String key = String.valueOf(list1.get(i));
            System.out.println(key);
            st.insert(key, i);
//            st.p();
        }
        System.out.println(")))))))))))))))))))))))");
//        st.p();
        System.out.println("remove:");
        Collections.shuffle(list1);
        for (Integer i : list1) {
            System.out.println(i);
            String key = String.valueOf(i);
            st.delete(key);
//            st.p();
            if (!st.check()) {
                System.err.println("FAILED");
                break;
            }
        }
        StdOut.println("done");
    }

    public void p() {
        if (root == null) {
            return;
        }
        ArrayList<Node> list = new ArrayList<>();
        list.add(root);
        while (!list.isEmpty()) {
            ArrayList<Node> next = new ArrayList<>();
            for (Node n : list) {
                System.out.println(n);
                if (n.left != null) {
                    next.add(n.left);
                }
                if (n.right != null) {
                    next.add(n.right);
                }
            }
            System.out.println("======");
            list = next;
        }
    }
}
